[{"/home/human/Dev/Server_web/ClientApp/src/index.js":"1","/home/human/Dev/Server_web/ClientApp/src/App.js":"2","/home/human/Dev/Server_web/ClientApp/src/redux/store.js":"3","/home/human/Dev/Server_web/ClientApp/src/redux/reducer/EntranceReducer.js":"4","/home/human/Dev/Server_web/ClientApp/src/redux/reducer/RegistrationReducer.js":"5","/home/human/Dev/Server_web/ClientApp/src/redux/reducer/TicketReducer.js":"6","/home/human/Dev/Server_web/ClientApp/src/tickets/Tickets.jsx":"7","/home/human/Dev/Server_web/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx":"8","/home/human/Dev/Server_web/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx":"9","/home/human/Dev/Server_web/ClientApp/src/AuthorizationPage/Registration/Registration.jsx":"10","/home/human/Dev/Server_web/ClientApp/src/tickets/ticket/Ticket.jsx":"11","/home/human/Dev/Server/ClientApp/src/index.js":"12","/home/human/Dev/Server/ClientApp/src/App.js":"13","/home/human/Dev/Server/ClientApp/src/redux/store.js":"14","/home/human/Dev/Server/ClientApp/src/redux/reducer/EntranceReducer.js":"15","/home/human/Dev/Server/ClientApp/src/redux/reducer/RegistrationReducer.js":"16","/home/human/Dev/Server/ClientApp/src/redux/reducer/TicketReducer.js":"17","/home/human/Dev/Server/ClientApp/src/tickets/Tickets.jsx":"18","/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx":"19","/home/human/Dev/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx":"20","/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Registration/Registration.jsx":"21","/home/human/Dev/Server/ClientApp/src/tickets/ticket/Ticket.jsx":"22","/home/human/Dev/Server/ClientApp/src/redux/redux-store.js":"23","/home/human/Dev/Server/ClientApp/src/redux/reducer/ForgotReducer.js":"24","/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Entrance/EnteranceContainer.jsx":"25","/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Registration/RegContainer.jsx":"26","/home/human/Dev/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotContainer.jsx":"27","/home/human/Dev/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoContainer.jsx":"28","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketPageContainer.jsx":"29","/home/human/Dev/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoPage.jsx":"30","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketPage.jsx":"31","/home/human/Dev/Server/ClientApp/src/Ticket/TicketInfoPage/Detail/Detail.jsx":"32","/home/human/Dev/Server/ClientApp/src/navbar/Navbar.jsx":"33","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/StatusColumn.jsx":"34","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketEnrolled/TicketEnrolled.jsx":"35","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketProcessing/TicketProcessing.jsx":"36","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketCompleted/TicketCompleted.jsx":"37"},{"size":478,"mtime":1610702767000,"results":"38","hashOfConfig":"39"},{"size":2241,"mtime":1610702767000,"results":"40","hashOfConfig":"39"},{"size":11013,"mtime":1610702767000,"results":"41","hashOfConfig":"39"},{"size":1003,"mtime":1610702767000,"results":"42","hashOfConfig":"39"},{"size":1694,"mtime":1610702767000,"results":"43","hashOfConfig":"39"},{"size":1711,"mtime":1610702767000,"results":"44","hashOfConfig":"39"},{"size":1882,"mtime":1610702767000,"results":"45","hashOfConfig":"39"},{"size":1783,"mtime":1610702767000,"results":"46","hashOfConfig":"39"},{"size":3390,"mtime":1610702767000,"results":"47","hashOfConfig":"39"},{"size":4507,"mtime":1610702767000,"results":"48","hashOfConfig":"39"},{"size":1349,"mtime":1610702767000,"results":"49","hashOfConfig":"39"},{"size":367,"mtime":1611648207000,"results":"50","hashOfConfig":"51"},{"size":1984,"mtime":1611648207000,"results":"52","hashOfConfig":"51"},{"size":11013,"mtime":1611475242408,"results":"53","hashOfConfig":"51"},{"size":4777,"mtime":1611648207000,"results":"54","hashOfConfig":"51"},{"size":6488,"mtime":1611648207000,"results":"55","hashOfConfig":"51"},{"size":4744,"mtime":1611648207000,"results":"56","hashOfConfig":"51"},{"size":1882,"mtime":1611475242408,"results":"57","hashOfConfig":"51"},{"size":2869,"mtime":1611648207000,"results":"58","hashOfConfig":"51"},{"size":2291,"mtime":1611648207000,"results":"59","hashOfConfig":"51"},{"size":3639,"mtime":1611648207000,"results":"60","hashOfConfig":"51"},{"size":1349,"mtime":1611475242408,"results":"61","hashOfConfig":"51"},{"size":565,"mtime":1611648207000,"results":"62","hashOfConfig":"51"},{"size":2136,"mtime":1611648207000,"results":"63","hashOfConfig":"51"},{"size":1663,"mtime":1611648207000,"results":"64","hashOfConfig":"51"},{"size":2015,"mtime":1611648207000,"results":"65","hashOfConfig":"51"},{"size":1272,"mtime":1611648207000,"results":"66","hashOfConfig":"51"},{"size":1372,"mtime":1611648207000,"results":"67","hashOfConfig":"51"},{"size":1566,"mtime":1611648207000,"results":"68","hashOfConfig":"51"},{"size":4843,"mtime":1611648207000,"results":"69","hashOfConfig":"51"},{"size":4171,"mtime":1611648207000,"results":"70","hashOfConfig":"51"},{"size":369,"mtime":1611648207000,"results":"71","hashOfConfig":"51"},{"size":1456,"mtime":1611648207000,"results":"72","hashOfConfig":"51"},{"size":8941,"mtime":1611648207000,"results":"73","hashOfConfig":"51"},{"size":528,"mtime":1611648207000,"results":"74","hashOfConfig":"51"},{"size":535,"mtime":1611648207000,"results":"75","hashOfConfig":"51"},{"size":531,"mtime":1611648207000,"results":"76","hashOfConfig":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"1p18y20",{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"79"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"we0qed",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"105"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"105"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"105"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"105"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/human/Dev/Server_web/ClientApp/src/index.js",[],["161","162"],"/home/human/Dev/Server_web/ClientApp/src/App.js",["163"],"import './App.css';\nimport React from \"react\";\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\n\nimport ForgotPasswordPage from \"./AuthorizationPage/ForgotPassword/ForgotPasswordPage\";\nimport Tickets from \"./tickets/Tickets\";\nimport logo from \"./logo.png\";\nimport Entrance from \"./AuthorizationPage/Entrance/Entrance\";\nimport Registration from \"./AuthorizationPage/Registration/Registration\";\nconst App=(props)=> {\n    return (\n        <BrowserRouter>\n            <div className={props.state.ForApp.ClassNameApp[0].name}>\n                <header className={props.state.ForApp.ClassNameApp[1].name}>\n                    {/*<img src={logo} className={props.state.ForApp.ClassNameApp[2].name} alt=\"\"/>*/}LOGO\n                </header>\n                <div className={props.state.ForApp.ClassNameApp[3].name}>\n\n                </div>\n                <div className={props.state.ForApp.ClassNameApp[4].name}>\n                    <Route exact path={props.state.ForApp.LinksApp[0].links}\n                           render={()=><Redirect to={props.state.ForApp.LinksApp[2].links}/>} />\n                    <Route exact path={props.state.ForApp.LinksApp[1].links}\n                           render={()=><Redirect to={props.state.ForApp.LinksApp[2].links}/>} />\n                    <Route path={props.state.ForApp.LinksApp[2].links}\n                           render={()=><Entrance state={props.state}\n                                                 dispatch={props.dispatch}\n                           />}/>\n                    <Route path={props.state.ForApp.LinksApp[3].links}\n                           render={()=><Registration state={props.state}\n                                                     dispatch={props.dispatch}\n                           />}/>\n                    <Route path=\"/Tickets\"\n                           render={()=><Tickets state={props.state}\n                                                dispatch={props.dispatch}\n                           />} />\n                    <Route path={props.state.ForApp.LinksApp[5].links}\n                           render={()=><ForgotPasswordPage state={props.state}/>} />\n                </div>\n\n            </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","/home/human/Dev/Server_web/ClientApp/src/redux/store.js",[],"/home/human/Dev/Server_web/ClientApp/src/redux/reducer/EntranceReducer.js",["164"],"const onClickButtonEnterActionType = 'ON-CLICK-BUTTON-ENTER';\nconst onLoginChangeEnterActionType = 'UPDATE-LOGIN-ENTER';\nconst onChangePassEnterActionType = 'UPDATE-PASSWORD-ENTER';\nconst EntranceReducer = (state,action)=>{\n    /*state=this._state.PageEntrance*/\n    switch (action.type) {\n        case onClickButtonEnterActionType:\n            alert(state.Login+\" \"+state.Password);\n\n            state.Login=\"\";\n            state.Password=\"\";\n            state.PasswordText=\"\";\n            return state;\n        case onLoginChangeEnterActionType:\n            state.Login=action.login;\n            return state;\n        case onChangePassEnterActionType:\n            let length=action.pass.length;\n            state.Password=state.Password+action.pass[length-1];\n            let text=\"\";\n            for(let i of action.pass){\n                text=text+\"*\"\n            }\n            state.PasswordText=text;\n            return state;\n        default:return state;\n    }\n}\n\nexport default EntranceReducer;","/home/human/Dev/Server_web/ClientApp/src/redux/reducer/RegistrationReducer.js",["165","166"],"const onClickButtonRegActionType = 'ON-CLICK-BUTTON-REG';\nconst updateLoginRegActionType = 'UPDATE-LOGIN-REG';\nconst updatePasswordRegActionType = 'UPDATE-PASSWORD-REG';\nconst updatePasswordRepRegActionType = 'UPDATE-PASSWORD-REP-REG';\nconst updateEmailRegActionType = 'UPDATE-EMAIL-REG';\nconst RegistrationReducer = (state,action)=>{\n    /*state=this._state.PageReg*/\n    switch (action.type) {\n        case onClickButtonRegActionType:\n            alert(state.Login+ \" \" + state.Password + \" \" + state.PassRep + \" \" + state.Email);\n            state.Login=\"\";\n            state.Password=\"\";\n            state.PasswordText=\"\";\n            state.PassRep=\"\";\n            state.PassRepText=\"\";\n            state.Email=\"\";\n            return state;\n        case updateLoginRegActionType:\n            state.Login=action.login;\n            return state;\n        case updatePasswordRegActionType:\n            let length=action.pass.length;\n            state.Password=state.Password+action.pass[length-1];\n            let text=\"\";\n            for(let i of action.pass){\n                text=text+\"*\"\n            }\n            state.PasswordText=text;\n            return state;\n        case updatePasswordRepRegActionType:\n            let lengthRep=action.PassRep.length;\n            state.PassRep=state.PassRep+action.PassRep[lengthRep-1];\n            let textRep=\"\";\n            for(let i of action.PassRep){\n                textRep=textRep+\"*\"\n            }\n            state.PassRepText=textRep;\n            return state;\n        case updateEmailRegActionType:\n            state.Email=action.email;\n            return state;\n        default:return state;\n    }\n}\n\nexport default RegistrationReducer;","/home/human/Dev/Server_web/ClientApp/src/redux/reducer/TicketReducer.js",[],"/home/human/Dev/Server_web/ClientApp/src/tickets/Tickets.jsx",[],"/home/human/Dev/Server_web/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx",[],"/home/human/Dev/Server_web/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx",[],"/home/human/Dev/Server_web/ClientApp/src/AuthorizationPage/Registration/Registration.jsx",[],"/home/human/Dev/Server_web/ClientApp/src/tickets/ticket/Ticket.jsx",[],"/home/human/Dev/Server/ClientApp/src/index.js",[],["167","168"],"/home/human/Dev/Server/ClientApp/src/App.js",[],"/home/human/Dev/Server/ClientApp/src/redux/store.js",[],["169","170"],"/home/human/Dev/Server/ClientApp/src/redux/reducer/EntranceReducer.js",["171"],"import * as axios from \"axios\";\n\nconst onClickButtonEnterActionType = 'ON-CLICK-BUTTON-ENTER';\nconst onLoginChangeEnterActionType = 'UPDATE-LOGIN-ENTER';\nconst onChangePassEnterActionType = 'UPDATE-PASSWORD-ENTER';\nconst onClickButtonForForgotActionType = 'ON-CLICK-BUTTON-FORGOT';\nconst onClickButtonForRegActionType = 'ON-CLICK-BUTTON-REG';\nlet InitialState = {\n    NamesEntrance: [\n        {id: 0, name: \"Войти\"},\n        {id: 1, name: \"Имя пользователя или Email\"},\n        {id: 2, name: \"Пароль\"},\n        {id: 3, name: \"Забыли свой пароль?\"},\n        {id: 4, name: \"Регистрация\"}\n    ],link_id:3,user:\"\",\n    LinksEntrance: [\n        {id: 0, links: \"/Authorization/ForgotPassword\"},\n        {id: 1, links: \"/Authorization/Registration\"},\n        {id: 2, links: \"/TicketPage\"},\n        {id:3,links:\"/Authorization/Entrance\"}\n    ],\n    Login: \"\",\n    Password: \"\", PasswordText: \"\", Type: \"text\", length: 0\n}\nconst EntranceReducer = (state = InitialState, action) => {\n    /*state=this._state.PageEntrance*/\n    let stateCopy = {};\n\n    switch (action.type) {\n        case onClickButtonForRegActionType: {\n            stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            action.history.push(stateCopy.LinksEntrance[1].links);\n            return (stateCopy);\n        }\n        case onClickButtonForForgotActionType: {\n            stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            action.history.push(stateCopy.LinksEntrance[0].links);\n            return (stateCopy);\n        }\n        case onClickButtonEnterActionType:{\n            stateCopy = {...state};\n            if((stateCopy.Login!==\"\")&&(stateCopy.Password!==\"\")){\n                let data = {\n                    login: stateCopy.Login,\n                    pass: stateCopy.Password,\n                    email: \"admin1\",\n                    // same for other inputs ..\n                };\n                axios.post(\"/WebUser/Login\", data, [{'Content-Type': 'application/json'}])/*http://84.22.135.132:5000/*/\n                    .then(res => {\n                        if (res.data.message === null) {\n                            alert(res.data.error);\n                        } else if (res.data.error === null) {\n                            alert(res.data.message);\n                            action.history.push(stateCopy.LinksEntrance[2].links);\n                        }\n                    });\n            }\n            else {alert(\"Поля пустые\")}\n            stateCopy.user=stateCopy.Login;\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            return stateCopy;\n        }\n        case onLoginChangeEnterActionType:\n            stateCopy = {...state};\n            stateCopy.Login = action.login;\n            return stateCopy;\n        case onChangePassEnterActionType:\n            stateCopy = {...state};\n            if (action.pass.length > stateCopy.length) {\n                let passArray = Array.from(action.pass);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.Password += s;\n                        stateCopy.PasswordText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PasswordText);\n                let PassArray = Array.from(stateCopy.Password);\n                stateCopy.PasswordText = \"\";\n                stateCopy.Password = \"\";\n                for (let i = 0; i < action.pass.length; i++) {\n                    stateCopy.PasswordText += passTextArray[i];\n                    stateCopy.Password += PassArray[i];\n                }\n            }\n            stateCopy.length = action.pass.length;\n            return stateCopy;\n        default:\n            return state;\n    }\n}\nexport const onClickEnterActionCreator = (history) => ({type: onClickButtonEnterActionType, history: history});\nexport const onClickForForgotActionCreator = (history) => ({type: onClickButtonForForgotActionType, history: history});\nexport const onClickForRegActionCreator = (history) => ({type: onClickButtonForRegActionType, history: history});\nexport const onLoginChangeEnterActionCreator = (loginText) => (\n    {type: onLoginChangeEnterActionType, login: loginText});\nexport const onPassChangeEnterActionCreator = (passText, length) => (\n    {type: onChangePassEnterActionType, pass: passText, length: length});\nexport default EntranceReducer;","/home/human/Dev/Server/ClientApp/src/redux/reducer/RegistrationReducer.js",["172","173"],"import * as axios from \"axios\"\n\nconst onClickButtonRegActionType = 'ON-CLICK-BUTTON-REGISTRATION';\nconst onClickButtonCancelActionType = 'ON-CLICK-BUTTON-CANCEL';\nconst updateLoginRegActionType = 'UPDATE-LOGIN-REG';\nconst updatePasswordRegActionType = 'UPDATE-PASSWORD-REG';\nconst updatePasswordRepRegActionType = 'UPDATE-PASSWORD-REP-REG';\nconst updateEmailRegActionType = 'UPDATE-EMAIL-REG';\nlet InitialState = {\n    NamesReg: [\n        {id: 0, name: \"Создать нового пользователя\"},\n        {id: 1, name: \"UserName\"},\n        {id: 2, name: \"Реальное имя\"},\n        {id: 3, name: \"Пароль\"},\n        {id: 4, name: \"Подтвердите пароль\"},\n        {id: 5, name: \"Email\"},\n        {id: 6, name: \"Отмена\"},\n        {id: 7, name: \"Зарегистрировать\"}\n    ],link_id:2,\n    LinksReg: [\n        {id: 0, links: \"/Authorization/Entrance\"},\n        {id: 1, links: \"/TicketPage\"},\n        {id: 2, links: \"/Authorization/Registration\"}\n    ],\n    Login: \"\",\n    Password: \"\", PasswordText: \"\", PassRep: \"\", PassRepText: \"\", Email: \"\", Type: \"text\",\n    lengthPass: 0, lengthPassRep: 0\n}\nconst RegistrationReducer = (state = InitialState, action) => {\n    /*state=this._state.PageReg*/\n    switch (action.type) {\n        case onClickButtonRegActionType: {\n            let stateCopy = {...state};\n            let emailValid = stateCopy.Email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n            if((stateCopy.Password===stateCopy.PassRep)&&(stateCopy.Login!==\"\")&&(stateCopy.Email!==\"\")&&(emailValid)){\n                let data = {\n                    login: stateCopy.Login,\n                    pass: stateCopy.Password,\n                    email: stateCopy.Email,\n                    // same for other inputs ..\n                };\n                axios.post(\"/WebUser/Create\", data, [{'Content-Type': 'application/json'}])/*http://84.22.135.132:5000/*/\n                    .then(res => {\n                            if (res.data.message === null) {\n                                alert(res.data.error);\n                            } else if (res.data.error === null) {\n                                alert(res.data.message);\n                                action.history.push(stateCopy.LinksReg[1].links);\n                            }\n                        }\n                    );\n            }\n            else {alert(\"Ошибка заполнения полей\")}\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.PassRep = \"\";\n            stateCopy.PassRepText = \"\";\n            stateCopy.Email = \"\";\n            stateCopy.lengthPass = 0;\n            stateCopy.lengthPassRep = 0;\n            /*action.history.push(stateCopy.LinksReg[1].links);*/\n            return stateCopy;\n        }\n        case onClickButtonCancelActionType: {\n            let stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.PassRep = \"\";\n            stateCopy.PassRepText = \"\";\n            stateCopy.Email = \"\";\n            stateCopy.lengthPass = 0;\n            stateCopy.lengthPassRep = 0;\n            action.history.push(stateCopy.LinksReg[0].links);\n            return stateCopy;\n\n        }\n        case updateLoginRegActionType: {\n            let stateCopy = {...state};\n            stateCopy.Login = action.login;\n            return stateCopy;\n        }\n        case updatePasswordRegActionType: {\n            let stateCopy = {...state};\n            if (action.pass.length > stateCopy.lengthPass) {\n                let passArray = Array.from(action.pass);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.Password += s;\n                        stateCopy.PasswordText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PasswordText);\n                let PassArray = Array.from(stateCopy.Password);\n                stateCopy.PasswordText = \"\";\n                stateCopy.Password = \"\";\n                for (let i = 0; i < action.pass.length; i++) {\n                    stateCopy.PasswordText += passTextArray[i];\n                    stateCopy.Password += PassArray[i];\n                }\n            }\n            stateCopy.lengthPass = action.pass.length;\n            return stateCopy;\n        }\n\n        case updatePasswordRepRegActionType: {\n            let stateCopy = {...state};\n            if (action.PassRep.length > stateCopy.lengthPassRep) {\n                let passArray = Array.from(action.PassRep);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.PassRep += s;\n                        stateCopy.PassRepText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PassRepText);\n                let PassArray = Array.from(stateCopy.PassRep);\n                stateCopy.PassRepText = \"\";\n                stateCopy.PassRep = \"\";\n                for (let i = 0; i < action.PassRep.length; i++) {\n                    stateCopy.PassRepText += passTextArray[i];\n                    stateCopy.PassRep += PassArray[i];\n                }\n            }\n            stateCopy.lengthPassRep = action.PassRep.length;\n            return stateCopy;\n        }\n        case updateEmailRegActionType: {\n            let stateCopy = {...state};\n            stateCopy.Email = action.email;\n            return stateCopy;\n        }\n\n        default:\n            return state;\n    }\n}\nexport const onClickRegActionCreator = (history) => ({type: onClickButtonRegActionType, history: history});\nexport const onClickCancelActionCreator = (history) => ({type: onClickButtonCancelActionType, history: history});\nexport const onLoginChangeRegActionCreator = (loginText) => (\n    {type: updateLoginRegActionType, login: loginText});\nexport const onPassChangeRegActionCreator = (passText, length) => (\n    {type: updatePasswordRegActionType, pass: passText, length: length});\nexport const onPassRepChangeRegActionCreator = (passRepText, length) => (\n    {type: updatePasswordRepRegActionType, PassRep: passRepText, length: length});\nexport const onEmailChangeRegActionCreator = (emailText) => (\n    {type: updateEmailRegActionType, email: emailText});\nexport default RegistrationReducer;","/home/human/Dev/Server/ClientApp/src/redux/reducer/TicketReducer.js",[],"/home/human/Dev/Server/ClientApp/src/tickets/Tickets.jsx",[],"/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx",[],"/home/human/Dev/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx",[],"/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Registration/Registration.jsx",[],"/home/human/Dev/Server/ClientApp/src/tickets/ticket/Ticket.jsx",[],"/home/human/Dev/Server/ClientApp/src/redux/redux-store.js",[],"/home/human/Dev/Server/ClientApp/src/redux/reducer/ForgotReducer.js",[],"/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Entrance/EnteranceContainer.jsx",[],"/home/human/Dev/Server/ClientApp/src/AuthorizationPage/Registration/RegContainer.jsx",[],"/home/human/Dev/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotContainer.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoContainer.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketPageContainer.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoPage.jsx",["174","175"],"import React from \"react\";\nimport s from \"./TicketInfoPage.module.css\";\nimport Detail from \"./Detail/Detail\";\nimport * as axios from \"axios\";\nimport Navbar from \"../../navbar/Navbar\";\nimport {withRouter} from \"react-router-dom\";\n\n\nclass TicketInfoPage extends React.Component {\n    constructor(props) {\n        super(props);\n        axios.get(\"/Ticket/Photos?id=\" + this.props.Ticket.ticket.id)/*http://84.22.135.132:5000/*/\n            .then(res => {\n                let img = res.data;\n                debugger\n                this.props.img(img);\n            });\n    }\n\n    Details = () => {\n        let array = <div>\n            <Detail DetailDescriptionType={\"Описание:\"} DetailDescriptionInfo={this.props.Ticket.ticket.description}/>\n            <Detail DetailDescriptionType={\"Дата добавления:\"}\n                    DetailDescriptionInfo={this.props.Ticket.ticket.date_add}/>\n            <Detail DetailDescriptionType={\"От кого:\"} DetailDescriptionInfo={\n                this.props.Ticket.ticket.mobile_user.surname + \" \"\n                + this.props.Ticket.ticket.mobile_user.name + \" \" +\n                this.props.Ticket.ticket.mobile_user.phone}/>\n            <Detail DetailDescriptionType={\"ГеоЛакация:\"} DetailDescriptionInfo={\n                this.props.Ticket.ticket.lat + \" \"\n                + this.props.Ticket.ticket.long_}/>\n        </div>\n        return (array);\n    }\n    ClickProc = (idStatus) => {\n        this.props.ClickProc(this.props.Ticket.ticket.id, idStatus)\n    }\n    ClickComp = (idStatus) => {\n        this.props.ClickComp(this.props.Ticket.ticket.id, idStatus)\n    }\n    Buttons = () => {\n        let button = this.props.StateTicket.map(ar => {\n            switch (ar.name) {\n                case \"В обработке\": {\n                    return (<div className={s.ForButton}>\n                        <button className={s.Button} onClick={() => this.ClickProc(ar.id)}>{ar.name}</button>\n                    </div>);\n                }\n                case \"Выполнена\": {\n                    return (<div className={s.ForButton}>\n                        <button className={s.Button} onClick={() => this.ClickComp(ar.id)}>{ar.name}</button>\n                    </div>);\n                }\n            }\n        });\n        return (button);\n    }\n    getUrlImage = () => {\n        let img = this.props.image.map(a => {\n                debugger\n                return (<img className={s.img} src={\"/Photo/\" + a} alt={\"\"}/*http://84.22.135.132:5000/*//>)\n            }\n        )\n        return (img);\n    }\n    image = () => {\n        debugger\n        if (this.props.image.length > 0) {\n            debugger\n            return (\n                <div className={s.ForImage}>\n                    <div>\n                        {this.props.Img}\n                    </div>\n                    {this.getUrlImage()}\n                </div>);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar links={this.props.links[this.props.link_id].link}\n                        buttonVisible={true} user={this.props.user}/>\n                <div className={s.TicketInfoPage}>\n                    <div className={s.NameTicket}>\n                        <div className={s.NameTicketText}>{this.props.Ticket.ticket.id}</div>\n                    </div>\n                    <div className={s.Content}>\n                        <div className={s.SideBarRight}>\n                            <div className={s.DetailNames}>{this.props.SideBarName}</div>\n                            {this.Buttons()}\n                        </div>\n                        <div className={s.ContentTicket}>\n                            <div className={s.Detail}>\n                                <div className={s.DetailName}>\n                                    <div className={s.DetailNames}>{this.props.DetailName}</div>\n                                </div>\n                                <div className={s.DetailDescription}>\n                                    {this.Details()}\n                                </div>\n                            </div>\n                            <div className={s.HistoryTicket}>\n                                <div className={s.HistoryTicketText}>{this.props.HistoryTicket}</div>\n                                <div className={s.HistoryTicketDescription}>\n                                    <div className={s.HistoryTicketText}>\n                                        {/*{this.props.HistoryText}*/}\n                                    </div>\n                                    {this.image()}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(TicketInfoPage);","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketPage.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketInfoPage/Detail/Detail.jsx",[],"/home/human/Dev/Server/ClientApp/src/navbar/Navbar.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/StatusColumn.jsx",["176","177"],"import React from \"react\";\nimport s from \"../TicketPage.module.css\";\nimport TicketEnrolled from \"./TicketEnrolled/TicketEnrolled\";\nimport TicketProcessing from \"./TicketProcessing/TicketProcessing\";\nimport TicketCompleted from \"./TicketCompleted/TicketCompleted\";\n\nlet StatusColumn = (props) => {\n    let getQuantityTicketEnt = (name, id) => {\n        let quantityTicketEnt;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id-1].name)) {\n                        debugger\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketEnt = j;\n        return (quantityTicketEnt);\n    }\n    let getQuantityTicketProc = (name, id) => {\n        let quantityTicketProc;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id-1].name)) {\n                        debugger\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketProc = j;\n        return (quantityTicketProc);\n    }\n    let getQuantityTicketComp = (name, id) => {\n        let quantityTicketComp;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id-1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketComp = j;\n        return (quantityTicketComp);\n    }\n    let getTicketEnrolled = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        array[i] = <TicketEnrolled name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i}\n                                                   ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id-1].name)) {\n                        array[i] = <TicketEnrolled name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i}\n                                                   ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n\n        return (array);\n    }\n    let getTicketProcessing = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        array[i] = <TicketProcessing name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id-1].name)) {\n                        array[i] = <TicketProcessing name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n        return (array);\n    }\n    let getTicketCompleted = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        array[i] = <TicketCompleted name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id-1].name)) {\n                        array[i] = <TicketCompleted name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n        return (array);\n    }\n    let IfNull = (quantity, Fun, name, i) => {\n        if (quantity <= 0) {\n            return (<div className={s.NullTicket}>{\"\"}</div>);\n        } else {\n            return (<div className={s.scrol}>\n                {Fun(name, i)}\n            </div>)\n        }\n    }\n    let StatusGet = () => {\n        let i = props.id;\n        let a;\n        if (props.StatusTicket.length > 0) {\n            a = props.StatusTicket.map(ar => {\n                    switch (ar.name) {\n                        case \"Поступила\": {\n                            return (<div className={s.StatusEnrolled}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketEnt(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketEnt(ar.name, i), getTicketEnrolled, ar.name, i)}\n                            </div>);\n                        }\n                        case \"В обработке\": {\n                            return (<div className={s.StatusProcessing}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketProc(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketProc(ar.name, i), getTicketProcessing, ar.name, i)}\n                            </div>);\n                        }\n                        case \"Выполнена\": {\n                            return (<div className={s.StatusCompleted}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketComp(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketComp(ar.name, i), getTicketCompleted, ar.name, i)}\n                            </div>);\n                        }\n                    }\n                }\n            );\n        }\n        /*        let ar=props.StatusTicket.map(\n\n                )*/\n        return (a);\n    }\n    return (\n        <div className={s.ForStatus}>\n            {StatusGet()}\n        </div>\n    );\n}\nexport default StatusColumn;","/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketEnrolled/TicketEnrolled.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketProcessing/TicketProcessing.jsx",[],"/home/human/Dev/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketCompleted/TicketCompleted.jsx",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":7,"column":8,"nodeType":"184","messageId":"185","endLine":7,"endColumn":12},{"ruleId":"182","severity":1,"message":"186","line":21,"column":21,"nodeType":"184","messageId":"185","endLine":21,"endColumn":22},{"ruleId":"182","severity":1,"message":"186","line":25,"column":21,"nodeType":"184","messageId":"185","endLine":25,"endColumn":22},{"ruleId":"182","severity":1,"message":"186","line":34,"column":21,"nodeType":"184","messageId":"185","endLine":34,"endColumn":22},{"ruleId":"178","replacedBy":"187"},{"ruleId":"180","replacedBy":"188"},{"ruleId":"178","replacedBy":"189"},{"ruleId":"180","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":83,"column":35,"nodeType":"193","messageId":"194","endLine":83,"endColumn":37},{"ruleId":"191","severity":1,"message":"192","line":88,"column":35,"nodeType":"193","messageId":"194","endLine":88,"endColumn":37},{"ruleId":"191","severity":1,"message":"192","line":112,"column":35,"nodeType":"193","messageId":"194","endLine":112,"endColumn":37},{"ruleId":"191","severity":1,"message":"195","line":42,"column":52,"nodeType":"193","messageId":"196","endLine":42,"endColumn":54},{"ruleId":"197","severity":1,"message":"198","line":43,"column":13,"nodeType":"199","messageId":"200","endLine":54,"endColumn":14},{"ruleId":"191","severity":1,"message":"195","line":176,"column":43,"nodeType":"193","messageId":"196","endLine":176,"endColumn":45},{"ruleId":"197","severity":1,"message":"198","line":177,"column":21,"nodeType":"199","messageId":"200","endLine":205,"endColumn":22},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'i' is assigned a value but never used.",["201"],["202"],["201"],["202"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]