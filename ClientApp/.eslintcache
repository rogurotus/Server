[{"/home/human/Документы/GitHub/Server/ClientApp/src/index.js":"1","/home/human/Документы/GitHub/Server/ClientApp/src/App.js":"2","/home/human/Документы/GitHub/Server/ClientApp/src/redux/redux-store.js":"3","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/EntranceReducer.js":"4","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/ForgotReducer.js":"5","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/RegistrationReducer.js":"6","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/TicketReducer.js":"7","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/EnteranceContainer.jsx":"8","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/RegContainer.jsx":"9","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotContainer.jsx":"10","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoContainer.jsx":"11","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPageContainer.jsx":"12","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx":"13","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx":"14","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/Registration.jsx":"15","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoPage.jsx":"16","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPage.jsx":"17","/home/human/Документы/GitHub/Server/ClientApp/src/navbar/Navbar.jsx":"18","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/Detail/Detail.jsx":"19","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/StatusColumn.jsx":"20","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketEnrolled/TicketEnrolled.jsx":"21","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketProcessing/TicketProcessing.jsx":"22","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketCompleted/TicketCompleted.jsx":"23"},{"size":367,"mtime":1615466007471,"results":"24","hashOfConfig":"25"},{"size":1984,"mtime":1615466007467,"results":"26","hashOfConfig":"25"},{"size":565,"mtime":1615466007471,"results":"27","hashOfConfig":"25"},{"size":4838,"mtime":1615466007471,"results":"28","hashOfConfig":"25"},{"size":2138,"mtime":1615466007471,"results":"29","hashOfConfig":"25"},{"size":6522,"mtime":1615466007471,"results":"30","hashOfConfig":"25"},{"size":4935,"mtime":1615466007471,"results":"31","hashOfConfig":"25"},{"size":1666,"mtime":1615466007467,"results":"32","hashOfConfig":"25"},{"size":2018,"mtime":1615466007471,"results":"33","hashOfConfig":"25"},{"size":1275,"mtime":1615466007471,"results":"34","hashOfConfig":"25"},{"size":1536,"mtime":1615466007471,"results":"35","hashOfConfig":"25"},{"size":1571,"mtime":1615466007471,"results":"36","hashOfConfig":"25"},{"size":2869,"mtime":1615466007467,"results":"37","hashOfConfig":"25"},{"size":2291,"mtime":1615466007471,"results":"38","hashOfConfig":"25"},{"size":3639,"mtime":1615466007471,"results":"39","hashOfConfig":"25"},{"size":5423,"mtime":1615466007471,"results":"40","hashOfConfig":"25"},{"size":4050,"mtime":1615466007471,"results":"41","hashOfConfig":"25"},{"size":1458,"mtime":1615466007471,"results":"42","hashOfConfig":"25"},{"size":374,"mtime":1615466007471,"results":"43","hashOfConfig":"25"},{"size":8887,"mtime":1615466007471,"results":"44","hashOfConfig":"25"},{"size":528,"mtime":1615466007471,"results":"45","hashOfConfig":"25"},{"size":535,"mtime":1615466007471,"results":"46","hashOfConfig":"25"},{"size":531,"mtime":1615466007471,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"5dqivs",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"/home/human/Документы/GitHub/Server/ClientApp/src/index.js",[],["100","101"],"/home/human/Документы/GitHub/Server/ClientApp/src/App.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/redux/redux-store.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/EntranceReducer.js",["102"],"import * as axios from \"axios\";\n\nconst onClickButtonEnterActionType = 'ON-CLICK-BUTTON-ENTER';\nconst onLoginChangeEnterActionType = 'UPDATE-LOGIN-ENTER';\nconst onChangePassEnterActionType = 'UPDATE-PASSWORD-ENTER';\nconst onClickButtonForForgotActionType = 'ON-CLICK-BUTTON-FORGOT';\nconst onClickButtonForRegActionType = 'ON-CLICK-BUTTON-REG';\nlet InitialState = {\n    NamesEntrance: [\n        {id: 0, name: \"Войти\"},\n        {id: 1, name: \"Имя пользователя или Email\"},\n        {id: 2, name: \"Пароль\"},\n        {id: 3, name: \"Забыли свой пароль?\"},\n        {id: 4, name: \"Регистрация\"}\n    ], link_id: 3, user: \"\",\n    LinksEntrance: [\n        {id: 0, links: \"/Authorization/ForgotPassword\"},\n        {id: 1, links: \"/Authorization/Registration\"},\n        {id: 2, links: \"/TicketPage\"},\n        {id: 3, links: \"/Authorization/Entrance\"}\n    ],\n    Login: \"\",\n    Password: \"\", PasswordText: \"\", Type: \"text\", length: 0\n}\nconst EntranceReducer = (state = InitialState, action) => {\n    /*state=this._state.PageEntrance*/\n    let stateCopy = {};\n\n    switch (action.type) {\n        case onClickButtonForRegActionType: {\n            stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            action.history.push(stateCopy.LinksEntrance[1].links);\n            return (stateCopy);\n        }\n        case onClickButtonForForgotActionType: {\n            stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            action.history.push(stateCopy.LinksEntrance[0].links);\n            return (stateCopy);\n        }\n        case onClickButtonEnterActionType: {\n            stateCopy = {...state};\n            if ((stateCopy.Login !== \"\") && (stateCopy.Password !== \"\")) {\n                let data = {\n                    login: stateCopy.Login,\n                    pass: stateCopy.Password,\n                    email: \"admin1\",\n                    // same for other inputs ..\n                };\n                /*let V=\"http://84.22.135.132:5000\";*/\n                axios.post(\"/WebUser/Login\", data, [{'Content-Type': 'application/json'}])\n                    .then(res => {\n                        if (res.data.message === null) {\n                            alert(res.data.error);\n                        } else if (res.data.error === null) {\n                            alert(res.data.message);\n                            action.history.push(stateCopy.LinksEntrance[2].links);\n                        }\n                    });\n            } else {\n                alert(\"Поля пустые\")\n            }\n            stateCopy.user = stateCopy.Login;\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            return stateCopy;\n        }\n        case onLoginChangeEnterActionType:\n            stateCopy = {...state};\n            stateCopy.Login = action.login;\n            return stateCopy;\n        case onChangePassEnterActionType:\n            stateCopy = {...state};\n            if (action.pass.length > stateCopy.length) {\n                let passArray = Array.from(action.pass);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.Password += s;\n                        stateCopy.PasswordText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PasswordText);\n                let PassArray = Array.from(stateCopy.Password);\n                stateCopy.PasswordText = \"\";\n                stateCopy.Password = \"\";\n                for (let i = 0; i < action.pass.length; i++) {\n                    stateCopy.PasswordText += passTextArray[i];\n                    stateCopy.Password += PassArray[i];\n                }\n            }\n            stateCopy.length = action.pass.length;\n            return stateCopy;\n        default:\n            return state;\n    }\n}\nexport const onClickEnterActionCreator = (history) => ({type: onClickButtonEnterActionType, history: history});\nexport const onClickForForgotActionCreator = (history) => ({type: onClickButtonForForgotActionType, history: history});\nexport const onClickForRegActionCreator = (history) => ({type: onClickButtonForRegActionType, history: history});\nexport const onLoginChangeEnterActionCreator = (loginText) => (\n    {type: onLoginChangeEnterActionType, login: loginText});\nexport const onPassChangeEnterActionCreator = (passText, length) => (\n    {type: onChangePassEnterActionType, pass: passText, length: length});\nexport default EntranceReducer;","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/ForgotReducer.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/RegistrationReducer.js",["103","104"],"import * as axios from \"axios\"\n\nconst onClickButtonRegActionType = 'ON-CLICK-BUTTON-REGISTRATION';\nconst onClickButtonCancelActionType = 'ON-CLICK-BUTTON-CANCEL';\nconst updateLoginRegActionType = 'UPDATE-LOGIN-REG';\nconst updatePasswordRegActionType = 'UPDATE-PASSWORD-REG';\nconst updatePasswordRepRegActionType = 'UPDATE-PASSWORD-REP-REG';\nconst updateEmailRegActionType = 'UPDATE-EMAIL-REG';\nlet InitialState = {\n    NamesReg: [\n        {id: 0, name: \"Создать нового пользователя\"},\n        {id: 1, name: \"UserName\"},\n        {id: 2, name: \"Реальное имя\"},\n        {id: 3, name: \"Пароль\"},\n        {id: 4, name: \"Подтвердите пароль\"},\n        {id: 5, name: \"Email\"},\n        {id: 6, name: \"Отмена\"},\n        {id: 7, name: \"Зарегистрировать\"}\n    ], link_id: 2,\n    LinksReg: [\n        {id: 0, links: \"/Authorization/Entrance\"},\n        {id: 1, links: \"/TicketPage\"},\n        {id: 2, links: \"/Authorization/Registration\"}\n    ],\n    Login: \"\",\n    Password: \"\", PasswordText: \"\", PassRep: \"\", PassRepText: \"\", Email: \"\", Type: \"text\",\n    lengthPass: 0, lengthPassRep: 0\n}\nconst RegistrationReducer = (state = InitialState, action) => {\n    /*state=this._state.PageReg*/\n    switch (action.type) {\n        case onClickButtonRegActionType: {\n            let stateCopy = {...state};\n            let emailValid = stateCopy.Email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n            if ((stateCopy.Password === stateCopy.PassRep) && (stateCopy.Login !== \"\") && (stateCopy.Email !== \"\") && (emailValid)) {\n                let data = {\n                    login: stateCopy.Login,\n                    pass: stateCopy.Password,\n                    email: stateCopy.Email,\n                    // same for other inputs ..\n                };\n                axios.post(\"/WebUser/Create\", data, [{'Content-Type': 'application/json'}])/*http://84.22.135.132:5000/*/\n                    .then(res => {\n                            if (res.data.message === null) {\n                                alert(res.data.error);\n                            } else if (res.data.error === null) {\n                                alert(res.data.message);\n                                action.history.push(stateCopy.LinksReg[1].links);\n                            }\n                        }\n                    );\n            } else {\n                alert(\"Ошибка заполнения полей\")\n            }\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.PassRep = \"\";\n            stateCopy.PassRepText = \"\";\n            stateCopy.Email = \"\";\n            stateCopy.lengthPass = 0;\n            stateCopy.lengthPassRep = 0;\n            /*action.history.push(stateCopy.LinksReg[1].links);*/\n            return stateCopy;\n        }\n        case onClickButtonCancelActionType: {\n            let stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.PassRep = \"\";\n            stateCopy.PassRepText = \"\";\n            stateCopy.Email = \"\";\n            stateCopy.lengthPass = 0;\n            stateCopy.lengthPassRep = 0;\n            action.history.push(stateCopy.LinksReg[0].links);\n            return stateCopy;\n\n        }\n        case updateLoginRegActionType: {\n            let stateCopy = {...state};\n            stateCopy.Login = action.login;\n            return stateCopy;\n        }\n        case updatePasswordRegActionType: {\n            let stateCopy = {...state};\n            if (action.pass.length > stateCopy.lengthPass) {\n                let passArray = Array.from(action.pass);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.Password += s;\n                        stateCopy.PasswordText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PasswordText);\n                let PassArray = Array.from(stateCopy.Password);\n                stateCopy.PasswordText = \"\";\n                stateCopy.Password = \"\";\n                for (let i = 0; i < action.pass.length; i++) {\n                    stateCopy.PasswordText += passTextArray[i];\n                    stateCopy.Password += PassArray[i];\n                }\n            }\n            stateCopy.lengthPass = action.pass.length;\n            return stateCopy;\n        }\n\n        case updatePasswordRepRegActionType: {\n            let stateCopy = {...state};\n            if (action.PassRep.length > stateCopy.lengthPassRep) {\n                let passArray = Array.from(action.PassRep);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.PassRep += s;\n                        stateCopy.PassRepText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PassRepText);\n                let PassArray = Array.from(stateCopy.PassRep);\n                stateCopy.PassRepText = \"\";\n                stateCopy.PassRep = \"\";\n                for (let i = 0; i < action.PassRep.length; i++) {\n                    stateCopy.PassRepText += passTextArray[i];\n                    stateCopy.PassRep += PassArray[i];\n                }\n            }\n            stateCopy.lengthPassRep = action.PassRep.length;\n            return stateCopy;\n        }\n        case updateEmailRegActionType: {\n            let stateCopy = {...state};\n            stateCopy.Email = action.email;\n            return stateCopy;\n        }\n\n        default:\n            return state;\n    }\n}\nexport const onClickRegActionCreator = (history) => ({type: onClickButtonRegActionType, history: history});\nexport const onClickCancelActionCreator = (history) => ({type: onClickButtonCancelActionType, history: history});\nexport const onLoginChangeRegActionCreator = (loginText) => (\n    {type: updateLoginRegActionType, login: loginText});\nexport const onPassChangeRegActionCreator = (passText, length) => (\n    {type: updatePasswordRegActionType, pass: passText, length: length});\nexport const onPassRepChangeRegActionCreator = (passRepText, length) => (\n    {type: updatePasswordRepRegActionType, PassRep: passRepText, length: length});\nexport const onEmailChangeRegActionCreator = (emailText) => (\n    {type: updateEmailRegActionType, email: emailText});\nexport default RegistrationReducer;","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/TicketReducer.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/EnteranceContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/RegContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPageContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/Registration.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoPage.jsx",["105","106"],"import React from \"react\";\nimport s from \"./TicketInfoPage.module.css\";\nimport Detail from \"./Detail/Detail\";\nimport * as axios from \"axios\";\nimport Navbar from \"../../navbar/Navbar\";\nimport {withRouter} from \"react-router-dom\";\n\n\nclass TicketInfoPage extends React.Component {\n    componentDidMount() {\n        /*let v=\"http://84.22.135.132:5000\"*/\n        axios.get(\"/Ticket/Photos?id=\" + this.props.Ticket.ticket.id)\n            .then(res => {\n                let img = res.data;\n                this.props.img(img);\n            });\n        debugger\n        axios.get(\"/tickethistory/\" + this.props.Ticket.ticket.id)\n            .then(res => {\n                debugger\n                let history = res.data;\n                this.props.Hist(history);\n            });\n    }\n    History= () =>{\n        debugger\n        let gethistory=()=>{\n            let historyText=this.props.HistoryText.map(ar=><div>{ar.date+\" из статуса \"+ar.ticket_state_old.name\n            +\" перешла в \"+ar.ticket_state_new.name}</div>);\n            debugger\n            return(historyText);\n        }\n        let History=<div>{gethistory()}</div>;\n        debugger\n        return(History);\n    }\n        Details = () => {\n        let array = <div>\n            <Detail DetailDescriptionType={\"Описание:\"} DetailDescriptionInfo={this.props.Ticket.ticket.description}/>\n            <Detail DetailDescriptionType={\"Дата добавления:\"}\n                    DetailDescriptionInfo={this.props.Ticket.ticket.date_add}/>\n            <Detail DetailDescriptionType={\"От кого:\"} DetailDescriptionInfo={\n                this.props.Ticket.ticket.mobile_user.surname + \" \"\n                + this.props.Ticket.ticket.mobile_user.name + \" \" +\n                this.props.Ticket.ticket.mobile_user.phone}/>\n            <Detail DetailDescriptionType={\"Геолокация:\"} DetailDescriptionInfo={\n                this.props.Ticket.ticket.lat + \" \"\n                + this.props.Ticket.ticket.long_}/>\n        </div>\n        return (array);\n    }\n    ClickProc = (idStatus) => {\n        debugger\n        this.props.ClickProc(this.props.Ticket.ticket.id, idStatus)\n    }\n    ClickComp = (idStatus) => {\n        debugger\n        this.props.ClickComp(this.props.Ticket.ticket.id, idStatus)\n    }\n    Buttons = () => {\n        let button = this.props.StateTicket.map(ar => {\n            switch (ar.name) {\n                case \"В обработке\": {\n                    return (<div className={s.ForButton}>\n                        <button className={s.Button} onClick={() => this.ClickProc(ar.id)}>{ar.name}</button>\n                    </div>);\n                }\n                case \"Выполнена\": {\n                    return (<div className={s.ForButton}>\n                        <button className={s.Button} onClick={() => this.ClickComp(ar.id)}>{ar.name}</button>\n                    </div>);\n                }\n            }\n        });\n        return (button);\n    }\n    getUrlImage = () => {\n        let img = this.props.image.map(a => {\n                return (<img className={s.img} src={\"/Photo/\" + a} alt={\"\"}/*http://84.22.135.132:5000/*//>)\n            }\n        )\n        return (img);\n    }\n    image = () => {\n        if (this.props.image.length > 0) {\n            return (\n                <div className={s.ForImage}>\n                    <div>\n                        {this.props.Img}\n                    </div>\n                    {this.getUrlImage()}\n                </div>);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar links={this.props.links[this.props.link_id].link}\n                        buttonVisible={true} user={this.props.user}/>\n                <div className={s.TicketInfoPage}>\n                    <div className={s.NameTicket}>\n                        <div className={s.NameTicketText}>{this.props.Ticket.ticket.id}</div>\n                    </div>\n                    <div className={s.Content}>\n                        <div className={s.SideBarRight}>\n                            <div className={s.DetailNames}>{this.props.SideBarName}</div>\n                            {this.Buttons()}\n                        </div>\n                        <div className={s.ContentTicket}>\n                            <div className={s.Detail}>\n                                <div className={s.DetailName}>\n                                    <div className={s.DetailNames}>{this.props.DetailName}</div>\n                                </div>\n                                <div className={s.DetailDescription}>\n                                    {this.Details()}\n                                </div>\n                            </div>\n                            <div className={s.HistoryTicket}>\n                                <div className={s.HistoryTicketText}>{this.props.HistoryTicket}</div>\n                                <div className={s.HistoryTicketDescription}>\n                                    <div className={s.HistoryTicketText}>\n                                        {this.History()}\n                                    </div>\n                                    {this.image()}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(TicketInfoPage);","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPage.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/navbar/Navbar.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/Detail/Detail.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/StatusColumn.jsx",["107","108"],"import React from \"react\";\nimport s from \"../TicketPage.module.css\";\nimport TicketEnrolled from \"./TicketEnrolled/TicketEnrolled\";\nimport TicketProcessing from \"./TicketProcessing/TicketProcessing\";\nimport TicketCompleted from \"./TicketCompleted/TicketCompleted\";\n\nlet StatusColumn = (props) => {\n    let getQuantityTicketEnt = (name, id) => {\n        let quantityTicketEnt;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id - 1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketEnt = j;\n        return (quantityTicketEnt);\n    }\n    let getQuantityTicketProc = (name, id) => {\n        let quantityTicketProc;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id - 1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketProc = j;\n        return (quantityTicketProc);\n    }\n    let getQuantityTicketComp = (name, id) => {\n        let quantityTicketComp;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id - 1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketComp = j;\n        return (quantityTicketComp);\n    }\n    let getTicketEnrolled = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        array[i] = <TicketEnrolled name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i}\n                                                   ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id - 1].name)) {\n                        array[i] = <TicketEnrolled name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i}\n                                                   ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n\n        return (array);\n    }\n    let getTicketProcessing = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        array[i] = <TicketProcessing name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id - 1].name)) {\n                        array[i] = <TicketProcessing name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n        return (array);\n    }\n    let getTicketCompleted = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].ticket.state.name === name) {\n                        array[i] = <TicketCompleted name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].ticket.state.name === name) &&\n                        (props.Ticket[i].traffic_light.district.name === props.directs[id - 1].name)) {\n                        array[i] = <TicketCompleted name={props.Ticket[i].ticket_id + \" \" +\n                        props.Ticket[i].traffic_light.district.name} id={i} ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n        return (array);\n    }\n    let IfNull = (quantity, Fun, name, i) => {\n        if (quantity <= 0) {\n            return (<div className={s.NullTicket}>{\"\"}</div>);\n        } else {\n            return (<div className={s.scrol}>\n                {Fun(name, i)}\n            </div>)\n        }\n    }\n    let StatusGet = () => {\n        let i = props.id;\n        let a;\n        if (props.StatusTicket.length > 0) {\n            a = props.StatusTicket.map(ar => {\n                    switch (ar.name) {\n                        case \"Поступила\": {\n                            return (<div className={s.StatusEnrolled}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketEnt(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketEnt(ar.name, i), getTicketEnrolled, ar.name, i)}\n                            </div>);\n                        }\n                        case \"В обработке\": {\n                            return (<div className={s.StatusProcessing}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketProc(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketProc(ar.name, i), getTicketProcessing, ar.name, i)}\n                            </div>);\n                        }\n                        case \"Выполнена\": {\n                            return (<div className={s.StatusCompleted}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketComp(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketComp(ar.name, i), getTicketCompleted, ar.name, i)}\n                            </div>);\n                        }\n                    }\n                }\n            );\n        }\n        /*        let ar=props.StatusTicket.map(\n\n                )*/\n        return (a);\n    }\n    return (\n        <div className={s.ForStatus}>\n            {StatusGet()}\n        </div>\n    );\n}\nexport default StatusColumn;","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketEnrolled/TicketEnrolled.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketProcessing/TicketProcessing.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketCompleted/TicketCompleted.jsx",[],["109","110"],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":85,"column":35,"nodeType":"117","messageId":"118","endLine":85,"endColumn":37},{"ruleId":"115","severity":1,"message":"116","line":89,"column":35,"nodeType":"117","messageId":"118","endLine":89,"endColumn":37},{"ruleId":"115","severity":1,"message":"116","line":113,"column":35,"nodeType":"117","messageId":"118","endLine":113,"endColumn":37},{"ruleId":"115","severity":1,"message":"119","line":61,"column":52,"nodeType":"117","messageId":"120","endLine":61,"endColumn":54},{"ruleId":"121","severity":1,"message":"122","line":62,"column":13,"nodeType":"123","messageId":"124","endLine":73,"endColumn":14},{"ruleId":"115","severity":1,"message":"119","line":174,"column":43,"nodeType":"117","messageId":"120","endLine":174,"endColumn":45},{"ruleId":"121","severity":1,"message":"122","line":175,"column":21,"nodeType":"123","messageId":"124","endLine":203,"endColumn":22},{"ruleId":"111","replacedBy":"125"},{"ruleId":"113","replacedBy":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["127"],["128"],"no-global-assign","no-unsafe-negation"]