[{"/home/human/Документы/GitHub/Server/ClientApp/src/index.js":"1","/home/human/Документы/GitHub/Server/ClientApp/src/App.js":"2","/home/human/Документы/GitHub/Server/ClientApp/src/redux/redux-store.js":"3","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/EntranceReducer.js":"4","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/ForgotReducer.js":"5","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/RegistrationReducer.js":"6","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/TicketReducer.js":"7","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/EnteranceContainer.jsx":"8","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/RegContainer.jsx":"9","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotContainer.jsx":"10","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoContainer.jsx":"11","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPageContainer.jsx":"12","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx":"13","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx":"14","/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/Registration.jsx":"15","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoPage.jsx":"16","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPage.jsx":"17","/home/human/Документы/GitHub/Server/ClientApp/src/navbar/Navbar.jsx":"18","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/Detail/Detail.jsx":"19","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/StatusColumn.jsx":"20","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketEnrolled/TicketEnrolled.jsx":"21","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketProcessing/TicketProcessing.jsx":"22","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketCompleted/TicketCompleted.jsx":"23"},{"size":367,"mtime":1615911496226,"results":"24","hashOfConfig":"25"},{"size":2147,"mtime":1615911496214,"results":"26","hashOfConfig":"25"},{"size":567,"mtime":1615911496246,"results":"27","hashOfConfig":"25"},{"size":4838,"mtime":1615911496246,"results":"28","hashOfConfig":"25"},{"size":2138,"mtime":1615911496246,"results":"29","hashOfConfig":"25"},{"size":6617,"mtime":1615911496246,"results":"30","hashOfConfig":"25"},{"size":5065,"mtime":1615911496246,"results":"31","hashOfConfig":"25"},{"size":1666,"mtime":1615911496218,"results":"32","hashOfConfig":"25"},{"size":2018,"mtime":1615911496218,"results":"33","hashOfConfig":"25"},{"size":1275,"mtime":1615911496218,"results":"34","hashOfConfig":"25"},{"size":1562,"mtime":1615911496222,"results":"35","hashOfConfig":"25"},{"size":1606,"mtime":1615911496222,"results":"36","hashOfConfig":"25"},{"size":3041,"mtime":1615911496218,"results":"37","hashOfConfig":"25"},{"size":2291,"mtime":1615911496218,"results":"38","hashOfConfig":"25"},{"size":4108,"mtime":1615911496218,"results":"39","hashOfConfig":"25"},{"size":6598,"mtime":1615911496222,"results":"40","hashOfConfig":"25"},{"size":5006,"mtime":1615911496222,"results":"41","hashOfConfig":"25"},{"size":1587,"mtime":1615911496226,"results":"42","hashOfConfig":"25"},{"size":374,"mtime":1615911496222,"results":"43","hashOfConfig":"25"},{"size":9077,"mtime":1615911496222,"results":"44","hashOfConfig":"25"},{"size":549,"mtime":1615911496226,"results":"45","hashOfConfig":"25"},{"size":556,"mtime":1615911496226,"results":"46","hashOfConfig":"25"},{"size":552,"mtime":1615911496222,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"5dqivs",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},"/home/human/Документы/GitHub/Server/ClientApp/src/index.js",[],["104","105"],"/home/human/Документы/GitHub/Server/ClientApp/src/App.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/redux/redux-store.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/EntranceReducer.js",["106"],"import * as axios from \"axios\";\n\nconst onClickButtonEnterActionType = 'ON-CLICK-BUTTON-ENTER';\nconst onLoginChangeEnterActionType = 'UPDATE-LOGIN-ENTER';\nconst onChangePassEnterActionType = 'UPDATE-PASSWORD-ENTER';\nconst onClickButtonForForgotActionType = 'ON-CLICK-BUTTON-FORGOT';\nconst onClickButtonForRegActionType = 'ON-CLICK-BUTTON-REG';\nlet InitialState = {\n    NamesEntrance: [\n        {id: 0, name: \"Войти\"},\n        {id: 1, name: \"Имя пользователя или Email\"},\n        {id: 2, name: \"Пароль\"},\n        {id: 3, name: \"Забыли свой пароль?\"},\n        {id: 4, name: \"Регистрация\"}\n    ], link_id: 3, user: \"\",\n    LinksEntrance: [\n        {id: 0, links: \"/Authorization/ForgotPassword\"},\n        {id: 1, links: \"/Authorization/Registration\"},\n        {id: 2, links: \"/TicketPage\"},\n        {id: 3, links: \"/Authorization/Entrance\"}\n    ],\n    Login: \"\",\n    Password: \"\", PasswordText: \"\", Type: \"text\", length: 0\n}\nconst EntranceReducer = (state = InitialState, action) => {\n    /*state=this._state.PageEntrance*/\n    let stateCopy = {};\n\n    switch (action.type) {\n        case onClickButtonForRegActionType: {\n            stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            action.history.push(stateCopy.LinksEntrance[1].links);\n            return (stateCopy);\n        }\n        case onClickButtonForForgotActionType: {\n            stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            action.history.push(stateCopy.LinksEntrance[0].links);\n            return (stateCopy);\n        }\n        case onClickButtonEnterActionType: {\n            stateCopy = {...state};\n            if ((stateCopy.Login !== \"\") && (stateCopy.Password !== \"\")) {\n                let data = {\n                    login: stateCopy.Login,\n                    pass: stateCopy.Password,\n                    email: \"admin1\",\n                    // same for other inputs ..\n                };\n                /*let V=\"http://84.22.135.132:5000\";*/\n                axios.post(\"/WebUser/Login\", data, [{'Content-Type': 'application/json'}])\n                    .then(res => {\n                        if (res.data.message === null) {\n                            alert(res.data.error);\n                        } else if (res.data.error === null) {\n                            alert(res.data.message);\n                            action.history.push(stateCopy.LinksEntrance[2].links);\n                        }\n                    });\n            } else {\n                alert(\"Поля пустые\")\n            }\n            stateCopy.user = stateCopy.Login;\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.length = 0;\n            return stateCopy;\n        }\n        case onLoginChangeEnterActionType:\n            stateCopy = {...state};\n            stateCopy.Login = action.login;\n            return stateCopy;\n        case onChangePassEnterActionType:\n            stateCopy = {...state};\n            if (action.pass.length > stateCopy.length) {\n                let passArray = Array.from(action.pass);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.Password += s;\n                        stateCopy.PasswordText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PasswordText);\n                let PassArray = Array.from(stateCopy.Password);\n                stateCopy.PasswordText = \"\";\n                stateCopy.Password = \"\";\n                for (let i = 0; i < action.pass.length; i++) {\n                    stateCopy.PasswordText += passTextArray[i];\n                    stateCopy.Password += PassArray[i];\n                }\n            }\n            stateCopy.length = action.pass.length;\n            return stateCopy;\n        default:\n            return state;\n    }\n}\nexport const onClickEnterActionCreator = (history) => ({type: onClickButtonEnterActionType, history: history});\nexport const onClickForForgotActionCreator = (history) => ({type: onClickButtonForForgotActionType, history: history});\nexport const onClickForRegActionCreator = (history) => ({type: onClickButtonForRegActionType, history: history});\nexport const onLoginChangeEnterActionCreator = (loginText) => (\n    {type: onLoginChangeEnterActionType, login: loginText});\nexport const onPassChangeEnterActionCreator = (passText, length) => (\n    {type: onChangePassEnterActionType, pass: passText, length: length});\nexport default EntranceReducer;","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/ForgotReducer.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/RegistrationReducer.js",["107","108"],"import * as axios from \"axios\"\n\nconst onClickButtonRegActionType = 'ON-CLICK-BUTTON-REGISTRATION';\nconst onClickButtonCancelActionType = 'ON-CLICK-BUTTON-CANCEL';\nconst updateLoginRegActionType = 'UPDATE-LOGIN-REG';\nconst updatePasswordRegActionType = 'UPDATE-PASSWORD-REG';\nconst updatePasswordRepRegActionType = 'UPDATE-PASSWORD-REP-REG';\nconst updateEmailRegActionType = 'UPDATE-EMAIL-REG';\nlet InitialState = {\n    NamesReg: [\n        {id: 0, name: \"Создать нового пользователя\"},\n        {id: 1, name: \"Логин\"},\n        {id: 2, name: \"Реальное имя\"},\n        {id: 3, name: \"Пароль\"},\n        {id: 4, name: \"Подтвердите пароль\"},\n        {id: 5, name: \"Электронная почта\"},\n        {id: 6, name: \"Отмена\"},\n        {id: 7, name: \"Зарегистрировать\"}\n    ], link_id: 2,\n    LinksReg: [\n        {id: 0, links: \"/Authorization/Entrance\"},\n        {id: 1, links: \"/TicketPage\"},\n        {id: 2, links: \"/Authorization/Registration\"}\n    ],\n    Login: \"\",\n    Password: \"\", PasswordText: \"\", PassRep: \"\", PassRepText: \"\", Email: \"\", Type: \"text\",\n    lengthPass: 0, lengthPassRep: 0, user: \"\"\n}\nconst RegistrationReducer = (state = InitialState, action) => {\n    /*state=this._state.PageReg*/\n    switch (action.type) {\n        case onClickButtonRegActionType: {\n            let stateCopy = {...state};\n            /*let emailValid = stateCopy.Email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);*/\n            if ((stateCopy.Password === stateCopy.PassRep) && (stateCopy.Login !== \"\")) {/*&& (stateCopy.Email !== \"\") && (emailValid)) */\n                let data = {\n                    login: stateCopy.Login,\n                    pass: stateCopy.Password,\n                    email: stateCopy.Email,\n                    // same for other inputs ..\n                };\n                axios.post(\"/WebUser/Create\", data, [{'Content-Type': 'application/json'}])/*http://84.22.135.132:5000/*/\n                    .then(res => {\n                            if (res.data.message === null) {\n                                alert(res.data.error);\n                            } else if (res.data.error === null) {\n                                alert(res.data.message);\n                                action.history.push(stateCopy.LinksReg[1].links);\n                            }\n                        }\n                    );\n            } else {\n                alert(\"Ошибка заполнения полей\")\n            }\n            stateCopy.user = stateCopy.Login;\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.PassRep = \"\";\n            stateCopy.PassRepText = \"\";\n            stateCopy.Email = \"\";\n            stateCopy.lengthPass = 0;\n            stateCopy.lengthPassRep = 0;\n            /*action.history.push(stateCopy.LinksReg[1].links);*/\n            return stateCopy;\n        }\n        case onClickButtonCancelActionType: {\n            let stateCopy = {...state};\n            stateCopy.Login = \"\";\n            stateCopy.Password = \"\";\n            stateCopy.PasswordText = \"\";\n            stateCopy.PassRep = \"\";\n            stateCopy.PassRepText = \"\";\n            stateCopy.Email = \"\";\n            stateCopy.lengthPass = 0;\n            stateCopy.lengthPassRep = 0;\n            action.history.push(stateCopy.LinksReg[0].links);\n            return stateCopy;\n\n        }\n        case updateLoginRegActionType: {\n            let stateCopy = {...state};\n            stateCopy.Login = action.login;\n            return stateCopy;\n        }\n        case updatePasswordRegActionType: {\n            let stateCopy = {...state};\n            if (action.pass.length > stateCopy.lengthPass) {\n                let passArray = Array.from(action.pass);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.Password += s;\n                        stateCopy.PasswordText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PasswordText);\n                let PassArray = Array.from(stateCopy.Password);\n                stateCopy.PasswordText = \"\";\n                stateCopy.Password = \"\";\n                for (let i = 0; i < action.pass.length; i++) {\n                    stateCopy.PasswordText += passTextArray[i];\n                    stateCopy.Password += PassArray[i];\n                }\n            }\n            stateCopy.lengthPass = action.pass.length;\n            return stateCopy;\n        }\n\n        case updatePasswordRepRegActionType: {\n            let stateCopy = {...state};\n            if (action.PassRep.length > stateCopy.lengthPassRep) {\n                let passArray = Array.from(action.PassRep);\n                passArray.map((s) => {\n                    if (s !== \"*\") {\n                        stateCopy.PassRep += s;\n                        stateCopy.PassRepText += \"*\";\n                    }\n                });\n            } else {\n                let passTextArray = Array.from(stateCopy.PassRepText);\n                let PassArray = Array.from(stateCopy.PassRep);\n                stateCopy.PassRepText = \"\";\n                stateCopy.PassRep = \"\";\n                for (let i = 0; i < action.PassRep.length; i++) {\n                    stateCopy.PassRepText += passTextArray[i];\n                    stateCopy.PassRep += PassArray[i];\n                }\n            }\n            stateCopy.lengthPassRep = action.PassRep.length;\n            return stateCopy;\n        }\n        case updateEmailRegActionType: {\n            let stateCopy = {...state};\n            stateCopy.Email = action.email;\n            return stateCopy;\n        }\n\n        default:\n            return state;\n    }\n}\nexport const onClickRegActionCreator = (history) => ({type: onClickButtonRegActionType, history: history});\nexport const onClickCancelActionCreator = (history) => ({type: onClickButtonCancelActionType, history: history});\nexport const onLoginChangeRegActionCreator = (loginText) => (\n    {type: updateLoginRegActionType, login: loginText});\nexport const onPassChangeRegActionCreator = (passText, length) => (\n    {type: updatePasswordRegActionType, pass: passText, length: length});\nexport const onPassRepChangeRegActionCreator = (passRepText, length) => (\n    {type: updatePasswordRepRegActionType, PassRep: passRepText, length: length});\nexport const onEmailChangeRegActionCreator = (emailText) => (\n    {type: updateEmailRegActionType, email: emailText});\nexport default RegistrationReducer;","/home/human/Документы/GitHub/Server/ClientApp/src/redux/reducer/TicketReducer.js",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/EnteranceContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/RegContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPageContainer.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Entrance/Entrance.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/ForgotPassword/ForgotPasswordPage.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/AuthorizationPage/Registration/Registration.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/TicketInfoPage.jsx",["109","110","111","112","113","114"],"import React from \"react\";\nimport s from \"./TicketInfoPage.module.css\";\nimport Detail from \"./Detail/Detail\";\nimport Navbar from \"../../navbar/Navbar\";\nimport {NavLink, withRouter} from \"react-router-dom\";\n\n\nclass TicketInfoPage extends React.Component {\n    constructor(props) {\n        super(props);\n        if (this.props.Ticket.length != 0) {\n            localStorage.setItem(\"Ticket\", JSON.stringify(this.props.Ticket));\n        }\n        if (this.props.StateTicket.length != 0) {\n            localStorage.setItem(\"State\", JSON.stringify(this.props.StateTicket));\n        }/*Сохранение в локал стейдж чтобы при перезагрузке все работало*/\n    }\n\n    History = () => {\n        let gethistory = () => {\n            let historyText = JSON.parse(localStorage.getItem(\"Ticket\")).histories.map(ar => <div>{\n                ar.date + \" из статуса \" + ar.ticket_state_old.name\n                + \" перешла в \" + ar.ticket_state_new.name}</div>);/*Получение истории заявки*/\n            return (historyText);\n        }\n        let History = <div>{gethistory()}</div>;\n        return (History);\n    }\n    Details = () => {\n        let array = <div>\n            <Detail DetailDescriptionType={\"Описание:\"} DetailDescriptionInfo={\n                JSON.parse(localStorage.getItem(\"Ticket\")).description}/>\n            <Detail DetailDescriptionType={\"Дата добавления:\"}\n                    DetailDescriptionInfo={JSON.parse(localStorage.getItem(\"Ticket\")).date_add}/>\n            <Detail DetailDescriptionType={\"От кого:\"} DetailDescriptionInfo={\n                JSON.parse(localStorage.getItem(\"Ticket\")).mobile_user.surname + \" \"\n                + JSON.parse(localStorage.getItem(\"Ticket\")).mobile_user.name + \" \" +\n                JSON.parse(localStorage.getItem(\"Ticket\")).mobile_user.phone}/>\n            <Detail DetailDescriptionType={\"Геолокация:\"} DetailDescriptionInfo={\n                JSON.parse(localStorage.getItem(\"Ticket\")).lat + \" \"\n                + JSON.parse(localStorage.getItem(\"Ticket\")).long_}/>\n            <Detail DetailDescriptionType={\"Район:\"} DetailDescriptionInfo={\n                JSON.parse(localStorage.getItem(\"Ticket\")).district.name}/>\n        </div>\n        return (array);/*Детали о заявки такие как описание,от кого и т.д*/\n    }\n    ClickProc = (idStatus) => {\n        this.props.ClickProc(JSON.parse(localStorage.getItem(\"Ticket\")).id, idStatus)\n    }/*на нажатие в процессе*/\n    ClickComp = (idStatus) => {\n        this.props.ClickComp(JSON.parse(localStorage.getItem(\"Ticket\")).id, idStatus)\n    }/*на нажатие выполнено*/\n    Buttons = () => {\n        let button = JSON.parse(localStorage.getItem(\"State\")).map(ar => {\n            switch (ar.name) {\n                case \"В обработке\": {\n                    return (<div className={s.ForButton}>\n                        <button className={s.Button} onClick={() => this.ClickProc(ar.id)}>{ar.name}</button>\n                    </div>);\n                }\n                case \"Выполнена\": {\n                    return (<div className={s.ForButton}>\n                        <button className={s.Button} onClick={() => this.ClickComp(ar.id)}>{ar.name}</button>\n                    </div>);\n                }\n            }\n        });\n        return (button);/*Генерация кнопок*/\n    }\n    getImage = () => {\n        const {history} = this.props;\n        let img1 = {\n            mini: [], photo: []\n        };\n        let img = [];\n        if (JSON.parse(localStorage.getItem(\"Ticket\")).mini_photo_id != null) {\n            img1.mini = JSON.parse(localStorage.getItem(\"Ticket\")).mini_photo_id.map(a => {\n                return (a)\n            });\n            img1.photo = JSON.parse(localStorage.getItem(\"Ticket\")).photo_id.map(a => {\n                return (a)\n            });\n\n            for (let i = 0; i < img1.mini.length; i++) {\n                let str=\"/Photo/\" + img1.photo[i];\n                img[i] = <a href={str}>\n                    <img className={s.img} src={\"/Photo/\" + img1.mini[i]} alt={\"\"}/>\n                </a>\n            }\n        }\n        return (img);/*Генерация изображений,проверка на случай отсутвия из-ий*/\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar links={this.props.links[this.props.link_id].link}\n                        buttonVisible={true} user={localStorage.getItem('user')}/>\n                <div className={s.TicketInfoPage}>\n                    <div className={s.NameTicket}>\n                        <div className={s.NameTicketText}>{\"Заявка по: \"\n                        + JSON.parse(localStorage.getItem(\"Ticket\")).type.name\n                        + \" ,№\" + JSON.parse(localStorage.getItem(\"Ticket\")).id}</div>\n                    </div>\n                    <div className={s.Content}>\n                        <div className={s.SideBarRight}>\n                            <div className={s.DetailNames}>{this.props.SideBarName}</div>\n                            {this.Buttons()}\n                        </div>\n                        <div className={s.ContentTicket}>\n                            <div className={s.Detail}>\n                                <div className={s.DetailName}>\n                                    <div className={s.DetailNames}>{this.props.DetailName}</div>\n                                </div>\n                                <div className={s.DetailDescription}>\n                                    {this.Details()}\n                                </div>\n                            </div>\n                            <div className={s.HistoryTicket}>\n                                <div className={s.HistoryTicketText}>{this.props.HistoryTicket}</div>\n                                <div className={s.HistoryTicketDescription}>\n                                    <div className={s.HistoryTicketText}>\n                                        {this.History()}\n                                    </div>\n                                    <div className={s.ForImage}>\n                                        {this.getImage()}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(TicketInfoPage);","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketPage.jsx",["115"],"import React from \"react\";\nimport s from \"./TicketPage.module.css\";\nimport StatusColumn from \"./TicketStatus/StatusColumn\";\nimport * as axios from \"axios\";\nimport Navbar from \"../../navbar/Navbar\";\nimport {NavLink} from \"react-router-dom\";\n\nclass TicketPage extends React.Component {\n    constructor(props) {\n        super(props);\n        if (this.props.user !== \"\" || this.props.user1 !== \"\") {\n            if (this.props.user !== \"\") {\n                localStorage.setItem('user', this.props.user);\n            }\n            if (this.props.user1 !== \"\") {\n                localStorage.setItem('user', this.props.user1);\n            }/*Запись логина нынешнего юзера чтобы при перезагрузке не пропадал*/\n        }\n        /*let v=\"http://84.22.135.132:5000\";*/\n        axios.get(\"/TicketType\")\n            .then(res => {\n                let Type = res.data;\n                this.props.type(Type);\n            });/*Типы заявок*/\n        axios.get(\"/TicketState\")\n            .then(res => {\n                let state = res.data;\n                this.props.state(state);\n            });/*состояния*/\n        axios.get(\"/District\")\n            .then(res => {\n                let direct = res.data;\n                this.props.direct(direct);\n            });/*Районы*/\n    }\n\n    Buttons = () => {\n        /*let v=\"http://84.22.135.132:5000\";*/\n        let clicks = [this.click, this.click1, this.click2, this.click3];\n        let buttons = this.props.TypeTicket.map(a => {\n                return (\n                    <div className={s.ItemsBut}>\n                        <div className={s.Button}>\n                            <NavLink to={\"/TicketPage\" + \"/\" + a.name}\n                                     onClick={clicks[a.id - 1]} activeClassName={s.active}>\n                                <img className={s.Img} src={a.url} alt=\"\"/>\n                                {a.name}\n                            </NavLink>\n                        </div>\n                    </div>\n                )\n            }\n        );\n        return (buttons);/*Генерация кнопок*/\n    }\n    Alert = (e) => {\n        let id = e.target.value;\n        this.props.UpdateIdSelect(id);\n    }/*На обновление района*/\n    Option = () => {\n        let opt1 = [];\n        if (this.props.directs.length > 0) {\n            for (let i = 0; i < this.props.directs.length; i++) {\n                opt1[i] = <option value={i + 1}>{this.props.directs[i].name}</option>\n            }\n        }\n        return (opt1)/*Генерация выпадающего списка*/\n    }\n    click = () => {\n        /*let v=\"http://84.22.135.132:5000\"*/\n        axios.get(\"/Ticket/1\")\n            .then(res => {\n                let data = res.data;\n                this.props.data(data);\n            });\n    }\n    click1 = () => {\n        axios.get(\"/Ticket/2\")\n            .then(res => {\n                let data = res.data;\n                this.props.data(data);\n            });\n    }\n    click2 = () => {\n        axios.get(\"/Ticket/3\")\n            .then(res => {\n                let data = res.data;\n                this.props.data(data);\n            });\n    }\n    click3 = () => {\n        axios.get(\"/Ticket/4\")\n            .then(res => {\n                let data = res.data;\n                this.props.data(data);\n            });\n    }\n\n    /*click0-3 клик по определенной категории заявки*/\n    render() {\n        return (\n            <div>\n                <Navbar links={this.props.links[this.props.link_id].link}\n                        buttonVisible={true} user={localStorage.getItem('user')}\n                />\n                <div className={s.ContentPage}>\n                    <div className={s.SideBar}>\n                        {this.Buttons()}\n                    </div>\n                    <div className={s.Content}>\n                        <div className={s.HelperBar}>\n                            <div className={s.Sort}>\n                                {this.props.NameForSelectDirect}\n                                <select name={this.props.NameForSelectDirect} id={0} onChange={this.Alert}>\n                                    <option\n                                        value={this.props.optionValue.value}>{this.props.optionValue.name}</option>\n                                    {this.Option()}\n                                </select>\n                            </div>\n                        </div>\n                        <StatusColumn\n                            id={this.props.ID}\n                            directs={this.props.directs}\n                            Ticket={this.props.ticket}\n                            StatusTicket={this.props.StatusTicket}\n                            ClickDirectInfo={this.props.ClickDirect}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TicketPage;","/home/human/Документы/GitHub/Server/ClientApp/src/navbar/Navbar.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketInfoPage/Detail/Detail.jsx",[],"/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/StatusColumn.jsx",["116","117"],"import React from \"react\";\nimport s from \"../TicketPage.module.css\";\nimport TicketEnrolled from \"./TicketEnrolled/TicketEnrolled\";\nimport TicketProcessing from \"./TicketProcessing/TicketProcessing\";\nimport TicketCompleted from \"./TicketCompleted/TicketCompleted\";\n\nlet StatusColumn = (props) => {\n    let getQuantityTicketEnt = (name, id) => {\n        let quantityTicketEnt;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].state.name === name) &&\n                        (props.Ticket[i].district.name === props.directs[id - 1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketEnt = j;\n        return (quantityTicketEnt);\n    }\n    let getQuantityTicketProc = (name, id) => {\n        let quantityTicketProc;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].state.name === name) &&\n                        (props.Ticket[i].district.name === props.directs[id - 1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketProc = j;\n        return (quantityTicketProc);\n    }\n    let getQuantityTicketComp = (name, id) => {\n        let quantityTicketComp;\n        let j = 0;\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].state.name === name) {\n                        j++;\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].state.name === name) &&\n                        (props.Ticket[i].district.name === props.directs[id - 1].name)) {\n                        j++;\n                    }\n                }\n                break;\n            }\n        }\n        quantityTicketComp = j;\n        return (quantityTicketComp);\n    }\n    let getTicketEnrolled = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].state.name === name) {\n                        array[i] = <TicketEnrolled name={props.Ticket[i].id + \" \" +\n                        props.Ticket[i].district.name} id={i} nomber={props.Ticket[i].id}\n                                                   ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].state.name === name) &&\n                        (props.Ticket[i].district.name === props.directs[id - 1].name)) {\n                        array[i] = <TicketEnrolled name={props.Ticket[i].id + \" \" +\n                        props.Ticket[i].district.name} id={i} nomber={props.Ticket[i].id}\n                                                   ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n\n        return (array);\n    }\n    let getTicketProcessing = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].state.name === name) {\n                        array[i] = <TicketProcessing name={props.Ticket[i].id + \" \" +\n                        props.Ticket[i].district.name} id={i} nomber={props.Ticket[i].id}\n                                                     ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].state.name === name) &&\n                        (props.Ticket[i].district.name === props.directs[id - 1].name)) {\n                        array[i] = <TicketProcessing name={props.Ticket[i].id + \" \" +\n                        props.Ticket[i].district.name} id={i} nomber={props.Ticket[i].id}\n                                                     ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n        return (array);\n    }\n    let getTicketCompleted = (name, id) => {\n        let array = [];\n        switch (id) {\n            case \"0\": {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if (props.Ticket[i].state.name === name) {\n                        array[i] = <TicketCompleted name={props.Ticket[i].id + \" \" +\n                        props.Ticket[i].district.name} id={i} nomber={props.Ticket[i].id}\n                                                    ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n            default: {\n                for (let i = 0; i < props.Ticket.length; i++) {\n                    if ((props.Ticket[i].state.name === name) &&\n                        (props.Ticket[i].district.name === props.directs[id - 1].name)) {\n                        array[i] = <TicketCompleted name={props.Ticket[i].id + \" \" +\n                        props.Ticket[i].district.name} id={i} nomber={props.Ticket[i].id}\n                                                    ClickDirectInfo={props.ClickDirectInfo}/>\n                    }\n                }\n                break;\n            }\n        }\n        return (array);\n    }\n    let IfNull = (quantity, Fun, name, i) => {\n        if (quantity <= 0) {\n            return (<div className={s.NullTicket}>{\"\"}</div>);\n        } else {\n            return (<div className={s.scrol}>\n                {Fun(name, i)}\n            </div>)\n        }\n    }\n    let StatusGet = () => {\n        let i = props.id;\n        let a;\n        if (props.StatusTicket.length > 0) {\n            a = props.StatusTicket.map(ar => {\n                    switch (ar.name) {\n                        case \"Поступила\": {\n                            return (<div className={s.StatusEnrolled}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketEnt(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketEnt(ar.name, i), getTicketEnrolled, ar.name, i)}\n                            </div>);\n                        }\n                        case \"В обработке\": {\n                            return (<div className={s.StatusProcessing}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketProc(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketProc(ar.name, i), getTicketProcessing, ar.name, i)}\n                            </div>);\n                        }\n                        case \"Выполнена\": {\n                            return (<div className={s.StatusCompleted}>\n                                <div className={s.StatusNames}>\n                                    <div className={s.StatusName}>{ar.name}</div>\n                                    <div className={s.StatusQuantity}>{\"Заявок: \" + getQuantityTicketComp(ar.name, i)}</div>\n                                </div>\n                                {IfNull(getQuantityTicketComp(ar.name, i), getTicketCompleted, ar.name, i)}\n                            </div>);\n                        }\n                    }\n                }\n            );\n        }\n        /*        let ar=props.StatusTicket.map(\n\n                )*/\n        return (a);\n    }\n    return (\n        <div className={s.ForStatus}>\n            {StatusGet()}\n        </div>\n    );\n}\nexport default StatusColumn;/*Данная функия генерирует и сортирует приходящие заявки*/","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketEnrolled/TicketEnrolled.jsx",["118"],"import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport s from \"./TicketEnrolled.module.css\";\n\nlet TicketEnrolled = (props) => {\n    const history = useHistory();\n    let viewProfile = () => {\n        props.ClickDirectInfo(props.id);\n        history.push(\"/TicketInfoPage\" + \"/\" + props.nomber);\n    };\n    return (\n        <div className={s.TicketEnrolled} onClick={viewProfile}>\n            <div className={s.TicketName}>\n                {props.name}\n            </div>\n        </div>\n    );\n}\nexport default TicketEnrolled;","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketProcessing/TicketProcessing.jsx",["119"],"import React from \"react\";\nimport s from \"./TicketProcessing.module.css\"\nimport {useHistory} from \"react-router-dom\";\n\nlet TicketProcessing = (props) => {\n    const history = useHistory();\n    let viewProfile = () => {\n        props.ClickDirectInfo(props.id);\n        history.push(\"/TicketInfoPage\" + \"/\" + props.nomber);\n    };\n    return (\n        <div className={s.TicketProcessing} onClick={viewProfile}>\n            <div className={s.TicketName}>\n                {props.name}\n            </div>\n        </div>\n    );\n}\nexport default TicketProcessing;","/home/human/Документы/GitHub/Server/ClientApp/src/Ticket/TicketPage/TicketStatus/TicketCompleted/TicketCompleted.jsx",["120"],"import React from \"react\";\nimport s from \"./TicketCompleted.module.css\"\nimport {useHistory} from \"react-router-dom\";\n\nlet TicketCompleted = (props) => {\n    const history = useHistory();\n    let viewProfile = () => {\n        props.ClickDirectInfo(props.id);\n        history.push(\"/TicketInfoPage\" + \"/\" + props.nomber);\n    };\n    return (\n        <div className={s.TicketCompleted} onClick={viewProfile}>\n            <div className={s.TicketName}>\n                {props.name}\n            </div>\n        </div>\n    );\n}\nexport default TicketCompleted;",["121","122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":85,"column":35,"nodeType":"129","messageId":"130","endLine":85,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":90,"column":35,"nodeType":"129","messageId":"130","endLine":90,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":114,"column":35,"nodeType":"129","messageId":"130","endLine":114,"endColumn":37},{"ruleId":"131","severity":1,"message":"132","line":5,"column":9,"nodeType":"133","messageId":"134","endLine":5,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":11,"column":38,"nodeType":"137","messageId":"138","endLine":11,"endColumn":40},{"ruleId":"135","severity":1,"message":"136","line":14,"column":43,"nodeType":"137","messageId":"138","endLine":14,"endColumn":45},{"ruleId":"127","severity":1,"message":"139","line":54,"column":71,"nodeType":"129","messageId":"140","endLine":54,"endColumn":73},{"ruleId":"141","severity":1,"message":"142","line":55,"column":13,"nodeType":"143","messageId":"144","endLine":66,"endColumn":14},{"ruleId":"131","severity":1,"message":"145","line":71,"column":16,"nodeType":"133","messageId":"134","endLine":71,"endColumn":23},{"ruleId":"146","severity":1,"message":"147","line":44,"column":56,"nodeType":"137","messageId":"148","endLine":44,"endColumn":57},{"ruleId":"127","severity":1,"message":"139","line":178,"column":43,"nodeType":"129","messageId":"140","endLine":178,"endColumn":45},{"ruleId":"141","severity":1,"message":"142","line":179,"column":21,"nodeType":"143","messageId":"144","endLine":207,"endColumn":22},{"ruleId":"146","severity":1,"message":"147","line":9,"column":40,"nodeType":"137","messageId":"148","endLine":9,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":9,"column":40,"nodeType":"137","messageId":"148","endLine":9,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":9,"column":40,"nodeType":"137","messageId":"148","endLine":9,"endColumn":41},{"ruleId":"123","replacedBy":"149"},{"ruleId":"125","replacedBy":"150"},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'history' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["151"],["152"],"no-global-assign","no-unsafe-negation"]